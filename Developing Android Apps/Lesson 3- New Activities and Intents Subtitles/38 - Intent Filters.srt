1
00:00:00,160 --> 00:00:02,340
As you can see, the receiver itself is pretty

2
00:00:02,340 --> 00:00:06,564
simple. Extend the broadcast receiver class and override the

3
00:00:06,564 --> 00:00:09,680
onreceive handle as you can see here. Receivers are

4
00:00:09,680 --> 00:00:13,520
lightweight components meant to listen for broadcasts, reacts, and complete

5
00:00:13,520 --> 00:00:16,690
within five seconds that usually means simply starting a

6
00:00:16,690 --> 00:00:19,350
service or sending a notification. To have your receiver

7
00:00:19,350 --> 00:00:22,470
start listening for broadcasts, you need to register it

8
00:00:22,470 --> 00:00:25,260
either through an entry in your manifest like this or

9
00:00:25,260 --> 00:00:29,240
dynamically within another application component usually an activity,

10
00:00:29,240 --> 00:00:33,080
like this. Then you define the intent filter that

11
00:00:33,080 --> 00:00:36,370
specifies the broadcast event you want to receive.

12
00:00:36,370 --> 00:00:38,570
You can do that either here in the manifest

13
00:00:38,570 --> 00:00:40,430
or if you're registering your receiver with an

14
00:00:40,430 --> 00:00:43,690
application component such as an activity, you can create

15
00:00:43,690 --> 00:00:46,630
your new intent filter like this. The biggest difference

16
00:00:46,630 --> 00:00:50,460
between manifest and dynamic receivers is when they're triggered.

17
00:00:50,460 --> 00:00:53,880
A programmatically-registered receiver will only receive broadcasts while

18
00:00:53,880 --> 00:00:57,890
the app is running. While a manifest declared

19
00:00:57,890 --> 00:01:02,060
receiver will start your app specifically to receive

20
00:01:02,060 --> 00:01:05,069
your broadcasts. For example, I usually code with

21
00:01:05,069 --> 00:01:07,610
my noise cancelling headphones on, so a music

22
00:01:07,610 --> 00:01:10,160
app like this might want to register a runtime

23
00:01:10,160 --> 00:01:12,710
receiver to listen to the system intent broadcast

24
00:01:12,710 --> 00:01:15,590
that announces when headphones are unplugged. That will allow

25
00:01:15,590 --> 00:01:18,790
it to automatically pause playback, when your audio routing switches

26
00:01:18,790 --> 00:01:21,950
from headphone to speakers. In this case, we can use

27
00:01:21,950 --> 00:01:24,750
a runtime receiver, because the app is guaranteed to be

28
00:01:24,750 --> 00:01:28,250
running if music is playing. On the other hand, if I'm

29
00:01:28,250 --> 00:01:30,790
using Google Cloud Messaging to listen for new data from

30
00:01:30,790 --> 00:01:34,730
my server, I want to register a manifest receiver that always listens

31
00:01:34,730 --> 00:01:37,420
for incoming tickles from my server and will wake up

32
00:01:37,420 --> 00:01:40,870
my app if it's being terminated to trigger the update code,

33
00:01:40,870 --> 00:01:43,130
usually a sync adapter, which is something we will discuss

34
00:01:43,130 --> 00:01:46,700
later in lesson six. There's a bunch of system broadcasts

35
00:01:46,700 --> 00:01:48,920
you can monitor to help your app react to changes

36
00:01:48,920 --> 00:01:51,880
in the system. You can see the system broadcast actions within

37
00:01:51,880 --> 00:01:56,515
the intent documentation at developer.android.com. One great use for broadcast

38
00:01:56,515 --> 00:02:00,030
receivers is to monitor for changes to internet connectivity or

39
00:02:00,030 --> 00:02:03,230
charging status. Imagine your app has to upload a movie

40
00:02:03,230 --> 00:02:06,170
or calculate the next 10,000 moves in a game of chess,

41
00:02:06,170 --> 00:02:09,620
how might you use a receiver to wait until the device is plugged in

42
00:02:09,620 --> 00:02:11,810
before starting that process? Should it be

43
00:02:11,810 --> 00:02:13,870
a manifest receiver or a broadcast receiver?
