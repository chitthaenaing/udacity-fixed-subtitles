<SAMI>
<HEAD>
<TITLE></TITLE>
<STYLE TYPE="text/css">
<!--
P { margin-left:16pt; margin-right:16pt; margin-bottom:16pt;
        margin-top:16pt; font-size:18pt; text-align:center;
        font-family:arial; font-weight:bold; color:#f0f0f0;
        }
.KRCC { Name:KR; lang:ko-KR; SAMIType:CC; }
.ENCC { Name:EN; lang:en-US; SAMIType:CC; }
#STDPrn { Name:Standard Print; }
#LargePrn { Name:Large Print; font-size:20pt; }
#SmallPrn { Name:Small Print; font-size:10pt; }
-->
</STYLE>
</HEAD>
<BODY>

<SYNC Start=200><P Class=KRCC>
MainActivity is launched when you start the app. At the bottom of MainActivity,
<SYNC Start=5370><P Class=KRCC>
&nbsp;
<SYNC Start=5371><P Class=KRCC>
we have PlaceholderFragment. PlaceholderFragment was generated by
<SYNC Start=9450><P Class=KRCC>
&nbsp;
<SYNC Start=9451><P Class=KRCC>
the template we used when creating our project.
<SYNC Start=12060><P Class=KRCC>
&nbsp;
<SYNC Start=12061><P Class=KRCC>
A fragment is a modular container within your activity. In later lessons,
<SYNC Start=17380><P Class=KRCC>
&nbsp;
<SYNC Start=17381><P Class=KRCC>
we'll look at how to use multiple fragments in a single activity. And
<SYNC Start=21380><P Class=KRCC>
&nbsp;
<SYNC Start=21381><P Class=KRCC>
we'll actually explain why, we're using them at all. But for now,
<SYNC Start=26140><P Class=KRCC>
&nbsp;
<SYNC Start=26141><P Class=KRCC>
our activity contains just this one fragment. So here in PlaceholderFragment,
<SYNC Start=31160><P Class=KRCC>
&nbsp;
<SYNC Start=31161><P Class=KRCC>
is where we reference our UI layout resource, called fragment main.
<SYNC Start=35700><P Class=KRCC>
&nbsp;
<SYNC Start=35701><P Class=KRCC>
This XML file lives in the Resource's RES directory of our Project Folder. You
<SYNC Start=41720><P Class=KRCC>
&nbsp;
<SYNC Start=41721><P Class=KRCC>
can see other kinds of resources here besides layouts, such as design assets or
<SYNC Start=46500><P Class=KRCC>
&nbsp;
<SYNC Start=46501><P Class=KRCC>
drawables, or strings. When our activity runs, it creates this placeholder
<SYNC Start=52910><P Class=KRCC>
&nbsp;
<SYNC Start=52911><P Class=KRCC>
fragment which then inflates the XML layout resource, converting everything in
<SYNC Start=57370><P Class=KRCC>
&nbsp;
<SYNC Start=57371><P Class=KRCC>
the XML file to a hierarchy of view objects in memory. By holding CTRL or
<SYNC Start=62376><P Class=KRCC>
&nbsp;
<SYNC Start=62377><P Class=KRCC>
CMD, depending on your operating system, and clicking on this reference to
<SYNC Start=66652><P Class=KRCC>
&nbsp;
<SYNC Start=66653><P Class=KRCC>
fragment main. Android studio will drop us right into the visual layout editor.
<SYNC Start=72500><P Class=KRCC>
&nbsp;
<SYNC Start=72501><P Class=KRCC>
Once we're inside a layout XML file, we can switch between the design tab,
<SYNC Start=77340><P Class=KRCC>
&nbsp;
<SYNC Start=77341><P Class=KRCC>
where we can drag and drop new UI elements and modify the layout visually. And
<SYNC Start=81840><P Class=KRCC>
&nbsp;
<SYNC Start=81841><P Class=KRCC>
the Text tab, where we can see and edit the XML that defined the layout and
<SYNC Start=86330><P Class=KRCC>
&nbsp;
<SYNC Start=86331><P Class=KRCC>
UI elements. All of the views we'll talk about here ultimately extend the view
<SYNC Start=91220><P Class=KRCC>
&nbsp;
<SYNC Start=91221><P Class=KRCC>
base class. The template we used gives us a relative layout, with some padding
<SYNC Start=96460><P Class=KRCC>
&nbsp;
<SYNC Start=96461><P Class=KRCC>
around the edges. We'll get into layout features like padding and margins,
<SYNC Start=100720><P Class=KRCC>
&nbsp;
<SYNC Start=100721><P Class=KRCC>
later. Inside our relative layout, is a single TextView that says, hello world.
<SYNC Start=107425><P Class=KRCC>
&nbsp;
<SYNC Start=107426><P Class=KRCC>
EditText, is a text entry field that is an editable version of text view.
<SYNC Start=111630><P Class=KRCC>
&nbsp;
<SYNC Start=111631><P Class=KRCC>
It has many options, such as whether it supports single or multi line.
<SYNC Start=116240><P Class=KRCC>
&nbsp;
<SYNC Start=116241><P Class=KRCC>
There are several styled versions of editText, in the text field section of
<SYNC Start=120380><P Class=KRCC>
&nbsp;
<SYNC Start=120381><P Class=KRCC>
android studio. Such as Name, E-mail, Phone, or
<SYNC Start=126210><P Class=KRCC>
&nbsp;
<SYNC Start=126211><P Class=KRCC>
Postal Address. Each one sets the soft keyboard into an appropriate entry mode.
<SYNC Start=131230><P Class=KRCC>
&nbsp;
<SYNC Start=132920><P Class=KRCC>
ImageView displays the image defined in its source attribute.
<SYNC Start=137580><P Class=KRCC>
&nbsp;
<SYNC Start=137581><P Class=KRCC>
It has some really useful features. Like zooming and copying if the source file
<SYNC Start=141990><P Class=KRCC>
&nbsp;
<SYNC Start=141991><P Class=KRCC>
is to large or has a different aspect ratio than the image view itself.
<SYNC Start=146870><P Class=KRCC>
&nbsp;
<SYNC Start=146871><P Class=KRCC>
A list view is a special kind of view that contains one or
<SYNC Start=150140><P Class=KRCC>
&nbsp;
<SYNC Start=150141><P Class=KRCC>
more view that are replicated to display sets of data. In this
<SYNC Start=154490><P Class=KRCC>
&nbsp;
<SYNC Start=154491><P Class=KRCC>
case the single textView is used to display the weather information replicated
<SYNC Start=158860><P Class=KRCC>
&nbsp;
<SYNC Start=158861><P Class=KRCC>
throughout the list. We'll get into much more detail about list view later on.</BODY>
</SAMI>
