1
00:00:00,480 --> 00:00:04,500
All right. You're done. Let's look at the solution. All

2
00:00:04,500 --> 00:00:08,270
right. We'll move to WeatherProvider. We start by creating a

3
00:00:08,270 --> 00:00:10,830
third selection query up at the top of our provider,

4
00:00:10,830 --> 00:00:13,670
much like the second query except that we search for

5
00:00:13,670 --> 00:00:16,420
the exact date. Rather than a greater than or equal

6
00:00:16,420 --> 00:00:18,850
date. We then add a function that uses the weather

7
00:00:18,850 --> 00:00:21,690
contract. Functions to get the date and postal code from

8
00:00:21,690 --> 00:00:25,810
the URI. We use the new query we just wrote.

9
00:00:25,810 --> 00:00:30,100
And the same SQLI query builder we used before, since it only defines the join.

10
00:00:32,200 --> 00:00:33,920
And then we just call this function in the

11
00:00:33,920 --> 00:00:36,500
weather with location and date switch statement in our

12
00:00:36,500 --> 00:00:40,670
query. That's it. Those are all the queries we

13
00:00:40,670 --> 00:00:43,760
plan to use for Sunshine, but we still need to

14
00:00:43,760 --> 00:00:47,000
test. Let's go back to test provider. As you

15
00:00:47,000 --> 00:00:51,020
can see, our test has a very, very good model

16
00:00:51,020 --> 00:00:53,620
already. Let's fix up some of these old tests

17
00:00:53,620 --> 00:00:57,510
and close the weather cursor. Now, we can simply copy

18
00:00:57,510 --> 00:01:00,490
this test over. It turns out that the exact

19
00:01:00,490 --> 00:01:03,910
same data is required for our new URI. All

20
00:01:03,910 --> 00:01:06,000
we have to do is to build weather location

21
00:01:06,000 --> 00:01:08,790
with date, instead of saying weather location with start

22
00:01:08,790 --> 00:01:12,010
date, and we should get the same result. Let's

23
00:01:13,210 --> 00:01:15,754
see if that's really true by running our tests.

24
00:01:15,754 --> 00:01:20,216
[SOUND] And our test passed. So, we've now implemented

25
00:01:20,216 --> 00:01:22,627
all of the queries, but we're not done with our

26
00:01:22,627 --> 00:01:25,920
content provider yet. After all, we're not writing

27
00:01:25,920 --> 00:01:28,000
any data into the database through our content provider
