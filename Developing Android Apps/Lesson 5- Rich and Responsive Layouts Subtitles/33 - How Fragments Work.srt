1
00:00:01,090 --> 00:00:04,000
So if we treat fragments as mini activities, each with

2
00:00:04,000 --> 00:00:07,510
its own independent life cycle in UI, how does that compare

3
00:00:07,510 --> 00:00:10,200
to the life cycle of a real activity? Well as

4
00:00:10,200 --> 00:00:13,490
you might expect the basic life cycle events are much the

5
00:00:13,490 --> 00:00:16,140
same as the parent activity, and as it moves through

6
00:00:16,140 --> 00:00:20,288
the cycles of starts, resumes, pauses, and stops those same life

7
00:00:20,288 --> 00:00:23,930
cycle events will be triggered within the fragment itself. So,

8
00:00:23,930 --> 00:00:26,140
in most cases, you can simply move anything that you would

9
00:00:26,140 --> 00:00:29,080
have put into the activities life cycle handles,

10
00:00:29,080 --> 00:00:32,259
into the corresponding fragment handles. With, of course, a

11
00:00:32,259 --> 00:00:35,460
couple of exceptions. Rather than building your UI here

12
00:00:35,460 --> 00:00:40,990
and onCreate, fragments introduced a new event specifically for

13
00:00:40,990 --> 00:00:44,260
this. OnCreate view is where you construct or inflate

14
00:00:44,260 --> 00:00:46,470
your UI, hook up to any data sources, and

15
00:00:46,470 --> 00:00:48,440
return it to the parent activity, which can then

16
00:00:48,440 --> 00:00:51,692
integrate it into its view hierarchy. There's a corresponding

17
00:00:51,692 --> 00:00:54,630
onDestroy view handler, which is called immediately before the

18
00:00:54,630 --> 00:00:57,240
fragment is added to the backstack, independent of the

19
00:00:57,240 --> 00:01:00,060
parent activity. Now keep in mind that the fragment

20
00:01:00,060 --> 00:01:04,450
manager can add any fragment transactions adding, removing, or replacing

21
00:01:04,450 --> 00:01:06,720
fragments to the back stack, with a single parent

22
00:01:06,720 --> 00:01:10,040
activity's actives. So a fragment can move through this

23
00:01:10,040 --> 00:01:13,484
cycle multiple times independent of the host activity. So

24
00:01:13,484 --> 00:01:16,570
onDestroy view is, where you should clean up any resources,

25
00:01:16,570 --> 00:01:19,870
specifically related to the UI, such as bitmaps in

26
00:01:19,870 --> 00:01:23,470
memory, cursors to data, anything like that to help ensure

27
00:01:23,470 --> 00:01:26,060
that your app's memory footprint isn't bloated by data that's

28
00:01:26,060 --> 00:01:29,950
not needed when the fragment isn't visible. Now as soon

29
00:01:29,950 --> 00:01:32,860
as the fragment is returned from the back stack, onCreate

30
00:01:32,860 --> 00:01:35,360
view is called, and you can re-create the UI and

31
00:01:35,360 --> 00:01:38,820
reconnect data sources before your fragment transitions through the rest

32
00:01:38,820 --> 00:01:41,810
of the life cycle to become active again. And because

33
00:01:41,810 --> 00:01:43,870
a fragment can only exist within an activity,

34
00:01:45,480 --> 00:01:47,280
we also need callbacks to tell us when a

35
00:01:47,280 --> 00:01:51,900
fragment is attached and detached from its parent. OnAttach

36
00:01:51,900 --> 00:01:53,930
is your opportunity to get a reference to the

37
00:01:53,930 --> 00:01:57,360
parent activity. While, onDetach is the last thing that

38
00:01:57,360 --> 00:02:01,430
happens, even after your fragment has technically been destroyed.

39
00:02:01,430 --> 00:02:03,779
Now, the final piece of the puzzle is onActivity

40
00:02:03,779 --> 00:02:07,060
created. This notifies our fragment that the parent activity

41
00:02:07,060 --> 00:02:09,990
has completed its own create handler and represents the point

42
00:02:09,990 --> 00:02:12,900
at which we can safely interact with its UI. Potentially

43
00:02:12,900 --> 00:02:16,460
including other fragments. Now, just like the activity lifecyle we

44
00:02:16,460 --> 00:02:19,410
discussed in lesson three, once the fragment is no longer

45
00:02:19,410 --> 00:02:22,040
visible, there's a chance it will be terminated with no

46
00:02:22,040 --> 00:02:25,730
further code being executed. That can happen, after onStop, in

47
00:02:25,730 --> 00:02:28,680
the case of the activity being terminated while the fragment

48
00:02:28,680 --> 00:02:32,270
is part of that activity's view hierarchy, or after onDestroy

49
00:02:32,270 --> 00:02:34,360
view, if the fragment has already been placed

50
00:02:34,360 --> 00:02:36,500
in the back stack, once the activity is destroyed.
