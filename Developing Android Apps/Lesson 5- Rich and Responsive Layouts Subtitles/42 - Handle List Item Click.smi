<SAMI>
<HEAD>
<TITLE></TITLE>
<STYLE TYPE="text/css">
<!--
P { margin-left:16pt; margin-right:16pt; margin-bottom:16pt;
        margin-top:16pt; font-size:18pt; text-align:center;
        font-family:arial; font-weight:bold; color:#f0f0f0;
        }
.KRCC { Name:KR; lang:ko-KR; SAMIType:CC; }
.ENCC { Name:EN; lang:en-US; SAMIType:CC; }
#STDPrn { Name:Standard Print; }
#LargePrn { Name:Large Print; font-size:20pt; }
#SmallPrn { Name:Small Print; font-size:10pt; }
-->
</STYLE>
</HEAD>
<BODY>

<SYNC Start=170><P Class=KRCC>
In the Forecast Fragment class, we add the callback
<SYNC Start=2516><P Class=KRCC>
&nbsp;
<SYNC Start=2517><P Class=KRCC>
that was provided in the gist. Then in the onCreateView
<SYNC Start=6020><P Class=KRCC>
&nbsp;
<SYNC Start=6021><P Class=KRCC>
method, we modify the item click behavior. When an
<SYNC Start=9200><P Class=KRCC>
&nbsp;
<SYNC Start=9201><P Class=KRCC>
item is clicked, we move the cursor to that position
<SYNC Start=11660><P Class=KRCC>
&nbsp;
<SYNC Start=11661><P Class=KRCC>
and then we read out the date string. We
<SYNC Start=14060><P Class=KRCC>
&nbsp;
<SYNC Start=14061><P Class=KRCC>
call getActivity and then we cast it to a Callback
<SYNC Start=17300><P Class=KRCC>
&nbsp;
<SYNC Start=17301><P Class=KRCC>
object. And then we call onItemSelected, with that date
<SYNC Start=20410><P Class=KRCC>
&nbsp;
<SYNC Start=20411><P Class=KRCC>
string. Then in the MainActivity, we implement this Callback interface.
<SYNC Start=25450><P Class=KRCC>
&nbsp;
<SYNC Start=25451><P Class=KRCC>
In the onItemSelected method, we fork behavior based on
<SYNC Start=28700><P Class=KRCC>
&nbsp;
<SYNC Start=28701><P Class=KRCC>
the TwoPane variable that we defined earlier. If we're
<SYNC Start=31530><P Class=KRCC>
&nbsp;
<SYNC Start=31531><P Class=KRCC>
in TwoPane mode, then we create a new DetailFragment
<SYNC Start=34650><P Class=KRCC>
&nbsp;
<SYNC Start=34651><P Class=KRCC>
using the date in the arguments bundle. And then
<SYNC Start=37180><P Class=KRCC>
&nbsp;
<SYNC Start=37181><P Class=KRCC>
we replace the existing fragment in the weather_detail_container. Otherwise,
<SYNC Start=41420><P Class=KRCC>
&nbsp;
<SYNC Start=41421><P Class=KRCC>
in OnePane mode, we create a new intent to
<SYNC Start=43900><P Class=KRCC>
&nbsp;
<SYNC Start=43901><P Class=KRCC>
launch the detail activity setting the date as an
<SYNC Start=46500><P Class=KRCC>
&nbsp;
<SYNC Start=46501><P Class=KRCC>
intent extra. In the detail activity, we modify the onCreate
<SYNC Start=50720><P Class=KRCC>
&nbsp;
<SYNC Start=50721><P Class=KRCC>
method to read the intent extras from the intent that
<SYNC Start=53950><P Class=KRCC>
&nbsp;
<SYNC Start=53951><P Class=KRCC>
came from the main activity. We take this date and set
<SYNC Start=56840><P Class=KRCC>
&nbsp;
<SYNC Start=56841><P Class=KRCC>
it in the arguments bundle to initialize the detail fragment.
<SYNC Start=59700><P Class=KRCC>
&nbsp;
<SYNC Start=59701><P Class=KRCC>
And we dynamically add the detail fragment to this container. In
<SYNC Start=63500><P Class=KRCC>
&nbsp;
<SYNC Start=63501><P Class=KRCC>
the detail fragment, we modify the on create loader method
<SYNC Start=66730><P Class=KRCC>
&nbsp;
<SYNC Start=66731><P Class=KRCC>
to read from the arguments that were passed in. We get
<SYNC Start=69710><P Class=KRCC>
&nbsp;
<SYNC Start=69711><P Class=KRCC>
the date string out and use it with the location
<SYNC Start=72270><P Class=KRCC>
&nbsp;
<SYNC Start=72271><P Class=KRCC>
string to build up the Uri to query the content provider.
<SYNC Start=75760><P Class=KRCC>
&nbsp;
<SYNC Start=75761><P Class=KRCC>
We also remove any reliance on the incoming intent.
<SYNC Start=78790><P Class=KRCC>
&nbsp;
<SYNC Start=78791><P Class=KRCC>
We switch it to use the arguments bundle, instead. For
<SYNC Start=81480><P Class=KRCC>
&nbsp;
<SYNC Start=81481><P Class=KRCC>
example, in the onActivityCreated method, we only initialize the loader
<SYNC Start=85220><P Class=KRCC>
&nbsp;
<SYNC Start=85221><P Class=KRCC>
if the arguments is not null. In the onResume method,
<SYNC Start=88620><P Class=KRCC>
&nbsp;
<SYNC Start=88621><P Class=KRCC>
we also modify the condition so that it checks that
<SYNC Start=91060><P Class=KRCC>
&nbsp;
<SYNC Start=91061><P Class=KRCC>
the arguments bundle is not null. When you try it
<SYNC Start=94520><P Class=KRCC>
&nbsp;
<SYNC Start=94521><P Class=KRCC>
out on the tablet, there is one bug related to
<SYNC Start=96990><P Class=KRCC>
&nbsp;
<SYNC Start=96991><P Class=KRCC>
navigation that we should fix. Say we select tomorrows date.
<SYNC Start=100810><P Class=KRCC>
&nbsp;
<SYNC Start=100811><P Class=KRCC>
If you navigate to the settings activity and then hit
<SYNC Start=103210><P Class=KRCC>
&nbsp;
<SYNC Start=103211><P Class=KRCC>
the up button, the detail fragment is blank. That's because
<SYNC Start=106980><P Class=KRCC>
&nbsp;
<SYNC Start=106981><P Class=KRCC>
a brand new instance of main activity got launched and
<SYNC Start=109840><P Class=KRCC>
&nbsp;
<SYNC Start=109841><P Class=KRCC>
for a brand new instance, nothing is selected yet. To fix
<SYNC Start=112880><P Class=KRCC>
&nbsp;
<SYNC Start=112881><P Class=KRCC>
this, when the settings activity up button is pressed, we
<SYNC Start=116170><P Class=KRCC>
&nbsp;
<SYNC Start=116171><P Class=KRCC>
want to navigate to the previous running instance of the
<SYNC Start=118690><P Class=KRCC>
&nbsp;
<SYNC Start=118691><P Class=KRCC>
main activity, where the tomorrow item is selected. And not
<SYNC Start=122370><P Class=KRCC>
&nbsp;
<SYNC Start=122371><P Class=KRCC>
create a new instance of main activity. In the settings activity,
<SYNC Start=126600><P Class=KRCC>
&nbsp;
<SYNC Start=126601><P Class=KRCC>
overwrite this method. Which the system will call in
<SYNC Start=129620><P Class=KRCC>
&nbsp;
<SYNC Start=129621><P Class=KRCC>
order to get the parent activity intent for the up
<SYNC Start=132430><P Class=KRCC>
&nbsp;
<SYNC Start=132431><P Class=KRCC>
button behaviour. Get the parent activity intent from the
<SYNC Start=135310><P Class=KRCC>
&nbsp;
<SYNC Start=135311><P Class=KRCC>
super class, this should create a new intent to main
<SYNC Start=138160><P Class=KRCC>
&nbsp;
<SYNC Start=138161><P Class=KRCC>
activity. Then add the intent flag, called FLAG_ACTIVITY_CLEAR_TOP. This
<SYNC Start=143500><P Class=KRCC>
&nbsp;
<SYNC Start=143501><P Class=KRCC>
flag indicates that we should check if the main activity
<SYNC Start=146080><P Class=KRCC>
&nbsp;
<SYNC Start=146081><P Class=KRCC>
is already running in our task. And to use
<SYNC Start=148400><P Class=KRCC>
&nbsp;
<SYNC Start=148401><P Class=KRCC>
that one, instead of creating a new main activity instance.
<SYNC Start=151890><P Class=KRCC>
&nbsp;
<SYNC Start=151891><P Class=KRCC>
Also, this method didn't exist prior to jelly bean, so we need
<SYNC Start=154730><P Class=KRCC>
&nbsp;
<SYNC Start=154731><P Class=KRCC>
to add this at target API annotation. If you check the documentation
<SYNC Start=159120><P Class=KRCC>
&nbsp;
<SYNC Start=159121><P Class=KRCC>
for the activity class, the getParentActivityIntent method was only added in API
<SYNC Start=164240><P Class=KRCC>
&nbsp;
<SYNC Start=164241><P Class=KRCC>
level 16. And you can check that version 16 maps to jelly bean.</BODY>
</SAMI>
