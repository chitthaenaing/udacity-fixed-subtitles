<SAMI>
<HEAD>
<TITLE></TITLE>
<STYLE TYPE="text/css">
<!--
P { margin-left:16pt; margin-right:16pt; margin-bottom:16pt;
        margin-top:16pt; font-size:18pt; text-align:center;
        font-family:arial; font-weight:bold; color:#f0f0f0;
        }
.KRCC { Name:KR; lang:ko-KR; SAMIType:CC; }
.ENCC { Name:EN; lang:en-US; SAMIType:CC; }
#STDPrn { Name:Standard Print; }
#LargePrn { Name:Large Print; font-size:20pt; }
#SmallPrn { Name:Small Print; font-size:10pt; }
-->
</STYLE>
</HEAD>
<BODY>

<SYNC Start=200><P Class=KRCC>
Okay. So now we have the wireframes implemented for both screens.
<SYNC Start=3890><P Class=KRCC>
&nbsp;
<SYNC Start=3891><P Class=KRCC>
But what does it look like on the tablet? Well, unfortunately,
<SYNC Start=7080><P Class=KRCC>
&nbsp;
<SYNC Start=7081><P Class=KRCC>
when we take the phone UI and stretch it out on
<SYNC Start=8920><P Class=KRCC>
&nbsp;
<SYNC Start=8921><P Class=KRCC>
a tablet, it doesn't look that great. There's a lot of empty
<SYNC Start=11630><P Class=KRCC>
&nbsp;
<SYNC Start=11631><P Class=KRCC>
white space here. We could better take advantage of this screen
<SYNC Start=14690><P Class=KRCC>
&nbsp;
<SYNC Start=14691><P Class=KRCC>
real estate by showing more useful information. For example, why do the
<SYNC Start=18860><P Class=KRCC>
&nbsp;
<SYNC Start=18861><P Class=KRCC>
details need to be a tap away when they could just
<SYNC Start=21310><P Class=KRCC>
&nbsp;
<SYNC Start=21311><P Class=KRCC>
as easily fit on this screen? And, furthermore, if the user wants
<SYNC Start=25380><P Class=KRCC>
&nbsp;
<SYNC Start=25381><P Class=KRCC>
to look through the full list of forecasts, their eyes
<SYNC Start=27850><P Class=KRCC>
&nbsp;
<SYNC Start=27851><P Class=KRCC>
must go like this, which is an unpleasant reading experience. If
<SYNC Start=32380><P Class=KRCC>
&nbsp;
<SYNC Start=32381><P Class=KRCC>
we want the user to read some content, we should keep
<SYNC Start=34960><P Class=KRCC>
&nbsp;
<SYNC Start=34961><P Class=KRCC>
the width narrower, so that they can scan it quickly. These
<SYNC Start=38340><P Class=KRCC>
&nbsp;
<SYNC Start=38341><P Class=KRCC>
considerations are part of responsive
<SYNC Start=40080><P Class=KRCC>
&nbsp;
<SYNC Start=40081><P Class=KRCC>
design. Responsive design means designing your
<SYNC Start=42400><P Class=KRCC>
&nbsp;
<SYNC Start=42401><P Class=KRCC>
app by keeping in mind that it'll be used across a
<SYNC Start=45190><P Class=KRCC>
&nbsp;
<SYNC Start=45191><P Class=KRCC>
range of different device screen sizes. But how do we do
<SYNC Start=48230><P Class=KRCC>
&nbsp;
<SYNC Start=48231><P Class=KRCC>
that, and what does it mean to build for larger screen
<SYNC Start=50540><P Class=KRCC>
&nbsp;
<SYNC Start=50541><P Class=KRCC>
devices like tablets. Well, I can show you some examples of
<SYNC Start=53700><P Class=KRCC>
&nbsp;
<SYNC Start=53701><P Class=KRCC>
how apps adapt using multi-pane layouts. In the Android Design Guide,
<SYNC Start=57420><P Class=KRCC>
&nbsp;
<SYNC Start=57421><P Class=KRCC>
there's a section on multi-pane layouts. One technique is to combine
<SYNC Start=61000><P Class=KRCC>
&nbsp;
<SYNC Start=61001><P Class=KRCC>
multiple views together. For example, in the People app, you have
<SYNC Start=64000><P Class=KRCC>
&nbsp;
<SYNC Start=64001><P Class=KRCC>
the contact list and the contact card for additional details. On
<SYNC Start=67800><P Class=KRCC>
&nbsp;
<SYNC Start=67801><P Class=KRCC>
the tablet, we can put them side by side. This is
<SYNC Start=70240><P Class=KRCC>
&nbsp;
<SYNC Start=70241><P Class=KRCC>
also known as the master detail flow. This is the master
<SYNC Start=73120><P Class=KRCC>
&nbsp;
<SYNC Start=73121><P Class=KRCC>
list and this is the detail pane. In the settings app,
<SYNC Start=75580><P Class=KRCC>
&nbsp;
<SYNC Start=75581><P Class=KRCC>
we have another example. The column width adjust based on the
<SYNC Start=78310><P Class=KRCC>
&nbsp;
<SYNC Start=78311><P Class=KRCC>
available screen width. In the calendar app, we have panels, and
<SYNC Start=81430><P Class=KRCC>
&nbsp;
<SYNC Start=81431><P Class=KRCC>
they stack vertically in the portrait orientation but horizontally in the
<SYNC Start=85170><P Class=KRCC>
&nbsp;
<SYNC Start=85171><P Class=KRCC>
landscape orientation. There also a couple of other examples that you
<SYNC Start=88650><P Class=KRCC>
&nbsp;
<SYNC Start=88651><P Class=KRCC>
can look through as well. If you want more information on
<SYNC Start=91550><P Class=KRCC>
&nbsp;
<SYNC Start=91551><P Class=KRCC>
designing for tablets or responsive design in general, you can check
<SYNC Start=95020><P Class=KRCC>
&nbsp;
<SYNC Start=95021><P Class=KRCC>
out the links below for more details. In this course, we're
<SYNC Start=98140><P Class=KRCC>
&nbsp;
<SYNC Start=98141><P Class=KRCC>
learning how to build up the phone UI first, and then the
<SYNC Start=100390><P Class=KRCC>
&nbsp;
<SYNC Start=100391><P Class=KRCC>
tablet UI. But in reality, when we're designing
<SYNC Start=102740><P Class=KRCC>
&nbsp;
<SYNC Start=102741><P Class=KRCC>
it, we thought about responsive design from day
<SYNC Start=104970><P Class=KRCC>
&nbsp;
<SYNC Start=104971><P Class=KRCC>
one. When you're building your own app, it's
<SYNC Start=107010><P Class=KRCC>
&nbsp;
<SYNC Start=107011><P Class=KRCC>
bad practice to just completely design and build
<SYNC Start=109550><P Class=KRCC>
&nbsp;
<SYNC Start=109551><P Class=KRCC>
your phone app and then start to brainstorm
<SYNC Start=111390><P Class=KRCC>
&nbsp;
<SYNC Start=111391><P Class=KRCC>
about the tablet UI. That's because the tablet
<SYNC Start=113810><P Class=KRCC>
&nbsp;
<SYNC Start=113811><P Class=KRCC>
UI often has an impact on the phone
<SYNC Start=115780><P Class=KRCC>
&nbsp;
<SYNC Start=115781><P Class=KRCC>
design, as well as the architectural decisions made here.</BODY>
</SAMI>
