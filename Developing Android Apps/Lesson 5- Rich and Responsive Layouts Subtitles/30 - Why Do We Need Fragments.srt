1
00:00:00,990 --> 00:00:02,810
So now you know, where fragments are used and

2
00:00:02,810 --> 00:00:05,700
where we're going to use them in our app. You're

3
00:00:05,700 --> 00:00:09,070
probably starting to ask, why use fragments at all?

4
00:00:09,070 --> 00:00:11,810
If we want to group UI components, couldn't we just create

5
00:00:11,810 --> 00:00:14,520
a View Group or maybe a re-usable XML layout

6
00:00:14,520 --> 00:00:19,240
definition? Yes. But, the real power in fragments goes

7
00:00:19,240 --> 00:00:22,220
beyond grouping UI elements. They allow us to fully

8
00:00:22,220 --> 00:00:26,350
modularize our activities, including the life cycle events they receive

9
00:00:26,350 --> 00:00:28,990
in the app state that they maintain. Fragments were

10
00:00:28,990 --> 00:00:33,090
first introduced in Honeycomb to solve a particular problem. Honeycomb

11
00:00:33,090 --> 00:00:36,390
was the first Android release to support tablets, and

12
00:00:36,390 --> 00:00:38,680
it turned out, the best way for most apps to

13
00:00:38,680 --> 00:00:41,780
create a great tablet UI. Is put two or

14
00:00:41,780 --> 00:00:46,910
more, of their phone activities alongside each other. For example,

15
00:00:46,910 --> 00:00:48,710
if you had a phone app that started with a

16
00:00:48,710 --> 00:00:51,520
list activity like this, which you then clicked an item

17
00:00:51,520 --> 00:00:54,570
would open a detailed activity like this one. What

18
00:00:54,570 --> 00:00:57,840
we call a master detail flow. A good tablet

19
00:00:57,840 --> 00:01:01,060
UI would put them side by side like this.

20
00:01:01,060 --> 00:01:04,760
Functionally, clicking an item on this list, now replaces this

21
00:01:04,760 --> 00:01:07,310
activity on the right, rather than starting a new

22
00:01:07,310 --> 00:01:08,680
one, as it would have done on the phone.

23
00:01:09,760 --> 00:01:13,940
Now unfortunately, Android didn't always support embedding activities within

24
00:01:13,940 --> 00:01:18,410
other activities. At least, it didn't until we introduced fragments.

25
00:01:18,410 --> 00:01:20,260
Now if you just look at the UI elements, you could

26
00:01:20,260 --> 00:01:23,470
be excused for thinking you could achieve much the same thing

27
00:01:23,470 --> 00:01:27,870
using an activity that was built using U Groups and layouts,

28
00:01:27,870 --> 00:01:32,630
without bothering the fragments, which is true up to a point.

29
00:01:32,630 --> 00:01:34,712
But then you'd have to pass through all of the activity

30
00:01:34,712 --> 00:01:37,860
life cycle events, manage the state of each piece of the

31
00:01:37,860 --> 00:01:40,390
UI, keep track of the state of each of the portions

32
00:01:40,390 --> 00:01:43,770
as they changed. And remember, which screen elements were on screen

33
00:01:43,770 --> 00:01:46,710
at any given time, in order to maintain app state.

34
00:01:47,740 --> 00:01:50,470
All of which, is exactly what the Fragment Manager does

35
00:01:50,470 --> 00:01:53,500
for you, when you use Fragments. And that lets you

36
00:01:53,500 --> 00:01:56,230
take a step back and, and treat each fragment as though

37
00:01:56,230 --> 00:01:59,240
it were a mini activity. For example, in the world

38
00:01:59,240 --> 00:02:02,400
of activities, you start one activity from the other, and that

39
00:02:02,400 --> 00:02:05,400
transaction is recorded on the back stack. So, hitting the

40
00:02:05,400 --> 00:02:09,090
Back button, we'll undo that transaction and bring the first activity

41
00:02:09,090 --> 00:02:11,310
to the front. Now the same thing can

42
00:02:11,310 --> 00:02:13,870
happen with fragment transactions. In this case, rather

43
00:02:13,870 --> 00:02:16,580
than starting a new activity, we simply replace

44
00:02:16,580 --> 00:02:19,480
the list fragment with the detail fragment. And then

45
00:02:19,480 --> 00:02:21,740
the back button will undo that transaction and

46
00:02:21,740 --> 00:02:24,210
reverse it. So in theory, you can really take

47
00:02:24,210 --> 00:02:26,880
any act with multiple activities and replace it

48
00:02:26,880 --> 00:02:29,950
with a single activity that's host to multiple fragments.
