1
00:00:00,160 --> 00:00:02,340
Now, it's time to finish creating our new view

2
00:00:02,340 --> 00:00:05,460
by drawing its contents. And, we do that within our

3
00:00:05,460 --> 00:00:08,900
Custom View's onDraw method. Now, the Android Canvas is pretty

4
00:00:08,900 --> 00:00:11,790
standard as far as canvas API's go. It uses the

5
00:00:11,790 --> 00:00:14,320
Painter's algorithm, meaning that each new thing you paint

6
00:00:14,320 --> 00:00:18,460
will cover anything beneath it. The Canvas and Paint classes

7
00:00:18,460 --> 00:00:20,770
offer a variety of brushes and helpers to draw and

8
00:00:20,770 --> 00:00:25,080
fill lines, boxes, circles, and text with colors, patterns, gradients,

9
00:00:25,080 --> 00:00:28,050
and images, as well as offering the ability to move, rotate,

10
00:00:28,050 --> 00:00:31,110
and scale the canvas while you draw. I could spend a lot

11
00:00:31,110 --> 00:00:34,240
of time here detailing exactly how to use each of these tools,

12
00:00:34,240 --> 00:00:36,940
but there's nothing unique to Android and it's covered really well on

13
00:00:36,940 --> 00:00:41,380
the documentation link below. It is possible though to create pretty advanced

14
00:00:41,380 --> 00:00:44,550
UIs this way. For example, for example, if we start by drawing

15
00:00:44,550 --> 00:00:47,330
a circle and then add a second circle and then you just

16
00:00:47,330 --> 00:00:50,120
need to finish drawing the rest of the compass. Here's an example

17
00:00:50,120 --> 00:00:52,780
I prepared earlier. The specifics of what you draw are

18
00:00:52,780 --> 00:00:55,700
different for every view, but one thing that is consistent

19
00:00:55,700 --> 00:00:58,650
is the resource constraint device you're drawing on. And that

20
00:00:58,650 --> 00:01:01,150
the onDraw method be called every time the screen is

21
00:01:01,150 --> 00:01:04,739
refreshed, potentially many times a second; that means any object

22
00:01:04,739 --> 00:01:08,130
created here within your onDraw method, including things like paint

23
00:01:08,130 --> 00:01:12,100
objects, will be created and destroyed at an alarming frequency.

24
00:01:12,100 --> 00:01:15,680
Object creation and destruction can be expensive on Android; potentially

25
00:01:15,680 --> 00:01:19,110
effecting the smoothness of your UI, when garbage collection is initiated.

26
00:01:19,110 --> 00:01:22,030
The solution? Move the scope of any object used within the

27
00:01:22,030 --> 00:01:25,930
onDraw loop, into the class scope. Go ahead and override the

28
00:01:25,930 --> 00:01:29,790
onDraw method within your new view and draw the new control.

29
00:01:29,790 --> 00:01:32,380
In fact, why not take this opportunity to create a custom

30
00:01:32,380 --> 00:01:35,400
control that can display the wind speed and direction fused within

31
00:01:35,400 --> 00:01:38,070
sunshine. Once you're done, you can add it to your layer

32
00:01:38,070 --> 00:01:40,830
using it it's full package name and class name in the XML

33
00:01:40,830 --> 00:01:45,370
like this. Run it and then post a screenshot of your new view into the forum.
