1
00:00:00,300 --> 00:00:03,240
Here you can see hierarchy view lets you select from

2
00:00:03,240 --> 00:00:06,400
a list of devices with physical and virtual on the left,

3
00:00:06,400 --> 00:00:08,720
each of which then contains each of the running activities

4
00:00:08,720 --> 00:00:12,880
and applications running on that device. You simply select the activity

5
00:00:12,880 --> 00:00:15,810
from the application that you want to profile. Then, hit

6
00:00:15,810 --> 00:00:19,430
the Load View hierarchy button here, and you'll see a representation

7
00:00:19,430 --> 00:00:23,250
of the selected activity's entire view hierarchy represented here in the

8
00:00:23,250 --> 00:00:25,400
Tree View, from left to right. You can see that the

9
00:00:25,400 --> 00:00:28,780
entire hierarchy is also shown here, in the overview and the layout

10
00:00:28,780 --> 00:00:32,030
itself is shown in a wire frame here. Clicking on any view,

11
00:00:32,030 --> 00:00:34,910
at any point within the hierarchy, will show you what is displayed,

12
00:00:34,910 --> 00:00:37,889
showing us the number of views which are contained within the hierarchy

13
00:00:37,889 --> 00:00:42,310
from this point onwards. You can also obtain the performance metrics to

14
00:00:42,310 --> 00:00:45,230
find out how long it takes to measure, layout and draw each

15
00:00:45,230 --> 00:00:48,480
element of the hierarchy. It's a powerful tool and you can find

16
00:00:48,480 --> 00:00:50,750
out more about how to use it to optimize your layouts and

17
00:00:50,750 --> 00:00:52,720
views in the videos and guides linked to from the

18
00:00:52,720 --> 00:00:55,680
instructor notes below. For now, note that we can use

19
00:00:55,680 --> 00:00:59,230
it to find surprisingly deeply nested layouts that need to

20
00:00:59,230 --> 00:01:01,780
be flattened. For example, here we have a layout we

21
00:01:01,780 --> 00:01:05,150
can describe using one of two techniques. One solution is

22
00:01:05,150 --> 00:01:09,530
using two nested linear layouts. But a better solution would

23
00:01:09,530 --> 00:01:12,576
be using a relative layout. The relative layout is one

24
00:01:12,576 --> 00:01:16,010
level shallower. Another tip is to avoid using the frame layout

25
00:01:16,010 --> 00:01:18,200
as the root for layout that will always be inserted

26
00:01:18,200 --> 00:01:21,940
as a child into another one. In these circumstances, the merge

27
00:01:21,940 --> 00:01:24,790
tag is a better alternative. This will be eliminated when the

28
00:01:24,790 --> 00:01:28,090
layout is included into the parents hierarchy. To help you remember

29
00:01:28,090 --> 00:01:30,630
all of these tips and tips, Android has a powerful static

30
00:01:30,630 --> 00:01:33,410
analysis tool called Lint. As you can see here in the

31
00:01:33,410 --> 00:01:36,790
lint window, in addition to the layout warnings we've already talked

32
00:01:36,790 --> 00:01:37,990
about, it also checks from

33
00:01:37,990 --> 00:01:40,990
everything from accessibility problems, missing translations,

34
00:01:40,990 --> 00:01:44,210
and hard coded strings. You can find all the things lint checks

35
00:01:44,210 --> 00:01:47,510
for at the developer tools page linked to in the instructor notes
