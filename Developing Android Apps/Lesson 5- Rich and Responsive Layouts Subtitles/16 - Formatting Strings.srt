1
00:00:00,090 --> 00:00:03,150
Currently, this is our forecast list. It looks okay, but

2
00:00:03,150 --> 00:00:04,689
it would be nice if we could show the degree

3
00:00:04,689 --> 00:00:08,310
symbol for these temperature values. Using this notation is best

4
00:00:08,310 --> 00:00:11,580
practice. It will help the translator know how to reorder the

5
00:00:11,580 --> 00:00:14,290
text and the parameters so that it fits the local

6
00:00:14,290 --> 00:00:16,790
language. Now let's look at how we can use this

7
00:00:16,790 --> 00:00:20,930
method to format temperatures within our app. Within the string.xml

8
00:00:20,930 --> 00:00:25,400
file, we declared the format temperature string resource. We use xliff

9
00:00:25,400 --> 00:00:28,250
tag to denote that this is where the decimal temperature

10
00:00:28,250 --> 00:00:30,850
value will go. This is followed by the unit code

11
00:00:30,850 --> 00:00:33,940
character for the degrees symbol. In the utility class, in

12
00:00:33,940 --> 00:00:37,770
the format temperature method, we can use this string resource. Remember

13
00:00:37,770 --> 00:00:40,090
that, in this method, we take in a temperature and

14
00:00:40,090 --> 00:00:43,530
a user's preference for metric or imperial. Then, we return

15
00:00:43,530 --> 00:00:47,140
the converted temperature. We're going to modify this method so that

16
00:00:47,140 --> 00:00:50,460
it also returns the formatted string with a degrees symbol after

17
00:00:50,460 --> 00:00:53,240
the value. In order to do this. We need to past

18
00:00:53,240 --> 00:00:56,270
in a context. From the context we can get access to the

19
00:00:56,270 --> 00:01:00,310
string resource ID that we declared earlier. Then we passed in any

20
00:01:00,310 --> 00:01:03,560
additional parameters for that string template. In this case we only have

21
00:01:03,560 --> 00:01:06,810
one parameters so we pass in the temperature value. Then this

22
00:01:06,810 --> 00:01:10,350
fully formatted string gets returned to the caller. This method is used

23
00:01:10,350 --> 00:01:13,290
in the forecast list, as well in the detail page. So we

24
00:01:13,290 --> 00:01:15,740
also had to update the code there so that it would compile

25
00:01:15,740 --> 00:01:19,120
with this new parameter. And this is what the app looks like after

26
00:01:19,120 --> 00:01:22,020
the change. Go ahead and make the change in your code to add a

27
00:01:22,020 --> 00:01:24,160
string resource for displaying temperature in

28
00:01:24,160 --> 00:01:26,940
degrees. Check this box when you're done.

29
00:01:26,940 --> 00:01:29,620
And remember, use this notation going forward

30
00:01:29,620 --> 00:01:31,360
for when you need to format strings
