1
00:00:00,270 --> 00:00:01,900
In this app, we see an example of a

2
00:00:01,900 --> 00:00:05,630
defragmented network traffic that uses the big cookie model. All

3
00:00:05,630 --> 00:00:08,490
the repeating transfers have been bundled together, and all

4
00:00:08,490 --> 00:00:10,150
the intermittent transfers have been

5
00:00:10,150 --> 00:00:12,200
largely replaced with aggressive prefetching.

6
00:00:13,220 --> 00:00:16,440
Obviously, you usually can't entirely predict what data users

7
00:00:16,440 --> 00:00:19,840
might need, nor can you ignore either client or service

8
00:00:19,840 --> 00:00:22,380
site changes the need to be synchronized. You can

9
00:00:22,380 --> 00:00:25,270
aim to minimize the number of radio state transitions through

10
00:00:25,270 --> 00:00:28,140
a combination of aggressive prefetching in addition to batching

11
00:00:28,140 --> 00:00:31,300
and queueing any transfers that aren't time critical and

12
00:00:31,300 --> 00:00:35,080
bundling these with user initiated time critical transfers, or

13
00:00:35,080 --> 00:00:38,050
those initiated from the server. If we compare the impact

14
00:00:38,050 --> 00:00:40,320
on the radio of the big cookie model compared

15
00:00:40,320 --> 00:00:43,150
to the previous on demand approach, you can see it's

16
00:00:43,150 --> 00:00:46,500
now idle nearly two thirds of the time. Even

17
00:00:46,500 --> 00:00:50,420
the active radio percentage has significantly dropped, thanks to improved

18
00:00:50,420 --> 00:00:54,250
download efficiency as a result of transmitting more data in one shot
