1
00:00:00,350 --> 00:00:02,050
Back in lesson four, we learned that the

2
00:00:02,050 --> 00:00:04,990
Android Runtime will kill apps with no visible activities,

3
00:00:04,990 --> 00:00:07,300
in order to free resources needed by the foreground

4
00:00:07,300 --> 00:00:10,110
app. But what if your app has tasks that

5
00:00:10,110 --> 00:00:12,820
need to continue when the activity isn't visible, things

6
00:00:12,820 --> 00:00:17,150
like downloading files, uploading photos, or playing music? Well,

7
00:00:17,150 --> 00:00:21,357
there's an application component for that. Services. We've already

8
00:00:21,357 --> 00:00:23,224
introduced Activities, Content Providers,

9
00:00:23,224 --> 00:00:25,230
Broadcast Receivers and Intents. Services,

10
00:00:25,230 --> 00:00:29,500
are the final piece to the Android app component

11
00:00:29,500 --> 00:00:33,369
puzzle. You start services much like you do activities, by

12
00:00:33,369 --> 00:00:36,880
passing in an intent to a Start Service call.

13
00:00:36,880 --> 00:00:39,212
And you can stop services the same way, by calling

14
00:00:39,212 --> 00:00:40,930
Stop Service and passing in the name of the

15
00:00:40,930 --> 00:00:44,770
service you want to stop. Unlike activities, services have no

16
00:00:44,770 --> 00:00:47,777
user interface and they run at a higher priority than

17
00:00:47,777 --> 00:00:50,490
background activities. This means that an app with a running

18
00:00:50,490 --> 00:00:52,690
service is less likely to be killed by the run

19
00:00:52,690 --> 00:00:55,620
time, in order to free resources for the foreground activities.

20
00:00:55,620 --> 00:00:58,350
In fact, by default, the system will attempt to restart

21
00:00:58,350 --> 00:01:01,180
services that are terminated before they are stopped from within

22
00:01:01,180 --> 00:01:05,129
the app. This is reflected in this simplified life cycle.

23
00:01:05,129 --> 00:01:09,050
Compared to Activities, Services are designed to execute longer running

24
00:01:09,050 --> 00:01:12,340
tasks that shouldn't be interrupted. Typically, you'll only need to

25
00:01:12,340 --> 00:01:15,900
override the onStartCommad handler, which is where you begin the background

26
00:01:15,900 --> 00:01:18,860
task you wish to execute. But notice that there are

27
00:01:18,860 --> 00:01:21,880
no handlers for monitoring changes in state, to reflect the

28
00:01:21,880 --> 00:01:24,600
app moving to the background. This is because the running

29
00:01:24,600 --> 00:01:27,250
service itself sends a signal to the framework that the

30
00:01:27,250 --> 00:01:30,930
containing app should be considered higher priority than other apps

31
00:01:30,930 --> 00:01:34,180
in the background that don't have running services. In some

32
00:01:34,180 --> 00:01:37,150
cases your service may performing a task, that while not

33
00:01:37,150 --> 00:01:41,450
having UI, can't be interrupted without interfering with the user experience.

34
00:01:41,450 --> 00:01:43,980
For example, playing music or helping with in car

35
00:01:43,980 --> 00:01:47,720
navigation. In these cases, you can indicate that your

36
00:01:47,720 --> 00:01:49,410
server should be considered to be running in the

37
00:01:49,410 --> 00:01:54,530
foreground by calling startForeground. You'll notice that this call takes

38
00:01:54,530 --> 00:01:57,330
in a notification. This will be displayed, and can't

39
00:01:57,330 --> 00:01:59,850
be dismissed until the service has stopped, or you

40
00:01:59,850 --> 00:02:03,680
call stopForeground. You'll learn more about notifications a little

41
00:02:03,680 --> 00:02:06,600
later, with Dan. But for now, note that a foreground

42
00:02:06,600 --> 00:02:10,440
service runs at the same priority as a foreground

43
00:02:10,440 --> 00:02:13,330
activity. Making it nearly impossible for the run time

44
00:02:13,330 --> 00:02:15,800
to kill in order to free resources. Now, you

45
00:02:15,800 --> 00:02:18,460
may be thinking to yourself, I could save a lot

46
00:02:18,460 --> 00:02:21,020
of trouble dealing with life cycles, just by creating

47
00:02:21,020 --> 00:02:24,830
long running, or even foreground services. Well, I grew up

48
00:02:24,830 --> 00:02:27,260
along the coast in Australia, so I learned young

49
00:02:27,260 --> 00:02:32,160
that swimming against the current is exhausting and ultimately futile.

50
00:02:32,160 --> 00:02:34,310
In this case, that means making it more difficult

51
00:02:34,310 --> 00:02:37,060
for the system to manage resources, ultimately leading to a

52
00:02:37,060 --> 00:02:40,780
worse user experience. Swim with the current. Use foreground

53
00:02:40,780 --> 00:02:45,500
services only when and for as long as absolutely necessary,

54
00:02:45,500 --> 00:02:49,020
and stop all services as quickly as possible. It's

55
00:02:49,020 --> 00:02:52,520
also important to note that like activities and receivers, services

56
00:02:52,520 --> 00:02:54,490
run on the main thread. So you'll need to

57
00:02:54,490 --> 00:02:57,620
use a background thread or a think task to execute

58
00:02:57,620 --> 00:02:59,190
the long running tasks you wish to do

59
00:02:59,190 --> 00:03:02,410
within your service. To make life easier, you can

60
00:03:02,410 --> 00:03:05,300
use the intent service class. Which implements the most

61
00:03:05,300 --> 00:03:07,920
common best practice pattern, for using intents, which are

62
00:03:07,920 --> 00:03:10,640
executed within a service. It creates a queue of

63
00:03:10,640 --> 00:03:14,630
incoming intents, passed in when start service is called.

64
00:03:14,630 --> 00:03:17,970
These are then, processed sequentially on a background thread,

65
00:03:17,970 --> 00:03:22,970
within the onHandleIntent handler, within your intent service implementation.

66
00:03:22,970 --> 00:03:25,840
When the queue is empty the service self terminates

67
00:03:25,840 --> 00:03:28,650
until a new intent is received and the process begins

68
00:03:28,650 --> 00:03:31,640
again. Services are a powerful tool and it's important

69
00:03:31,640 --> 00:03:34,980
to understand how you can use them but in practice

70
00:03:34,980 --> 00:03:37,290
there's often a framework alternative to rolling your own

71
00:03:37,290 --> 00:03:40,770
service implementation. Whether that be an intent service for executing

72
00:03:40,770 --> 00:03:43,810
background tasks or the sync adapter which you'll learn about

73
00:03:43,810 --> 00:03:47,620
later in this lesson. Perfect for performing background data synchronization
