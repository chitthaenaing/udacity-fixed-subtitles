1
00:00:01,030 --> 00:00:04,939
Inexact repeating alarms. Infinitely better than exact repeating alarms, but

2
00:00:04,939 --> 00:00:08,690
still far from ideal. The problem with any kind of repeating

3
00:00:08,690 --> 00:00:11,350
alarm is that it's still polling your server to check

4
00:00:11,350 --> 00:00:14,530
for updates. So the more frequently you poll, the fresher the

5
00:00:14,530 --> 00:00:17,130
data you can display, but the higher the cost in

6
00:00:17,130 --> 00:00:20,740
battery life. You can pull as frequently to conserve battery but

7
00:00:20,740 --> 00:00:23,730
that just means your content will be stale for longer.

8
00:00:23,730 --> 00:00:26,530
You could just let the user decide the update frequency themselves,

9
00:00:26,530 --> 00:00:29,140
but then you lose the magic. If only there was

10
00:00:29,140 --> 00:00:32,820
a better way. Is such a thing possible? Yes it

11
00:00:32,820 --> 00:00:36,440
is. Google cloud messaging lets your server notify your app

12
00:00:36,440 --> 00:00:39,340
directly when there's data ready to be downloaded. Or it

13
00:00:39,340 --> 00:00:41,550
can even include the new data in the message payload

14
00:00:41,550 --> 00:00:45,300
itself. Using Google Cloud Messaging, you can send messages from

15
00:00:45,300 --> 00:00:48,260
your server to any installed instance of your app via

16
00:00:48,260 --> 00:00:51,650
the Google Cloud. As a result, you can stop polling,

17
00:00:51,650 --> 00:00:54,630
which will immediately improve battery life and also improve the

18
00:00:54,630 --> 00:00:58,036
freshness of your app. And instead, rely on your server

19
00:00:58,036 --> 00:01:01,670
notifying clients when there's data to sync. These messages can

20
00:01:01,670 --> 00:01:04,785
be simple tickles, that trigger a sync adapter by notifying your

21
00:01:04,785 --> 00:01:07,350
app that there is new data or need to download.

22
00:01:07,350 --> 00:01:10,560
Or you can include the new data within the message payload.

23
00:01:10,560 --> 00:01:14,140
In the sunshine example, we're using someone else's server. But

24
00:01:14,140 --> 00:01:17,010
even then, it may make sense to create your own middle

25
00:01:17,010 --> 00:01:20,780
tier that pulls the source and notifies your installed app instances

26
00:01:20,780 --> 00:01:23,650
when it notices a change. Now we're not going to set up a

27
00:01:23,650 --> 00:01:26,260
server in this lesson, but you can see the full details for

28
00:01:26,260 --> 00:01:30,040
using Google cloud messaging from the developer guide linked to instructor nets.
