1
00:00:00,220 --> 00:00:05,400
Now that's a contract. But we still don't have a database.

2
00:00:05,400 --> 00:00:10,960
Our database class will extend an Android class. SQLITEOpenHELPER.

3
00:00:13,910 --> 00:00:18,900
SQLITEOpenHELPER contains cool stuff to help us handle database versioning.

4
00:00:18,900 --> 00:00:23,280
As we make changes to our database in the future, it will help us modify our

5
00:00:23,280 --> 00:00:28,510
tables. For many apps, being able to upgrade to a new version without data loss

6
00:00:28,510 --> 00:00:34,585
is critical. Let's create a WeatherDBHelper class within the data package and

7
00:00:34,585 --> 00:00:39,732
have that extend SQLite Open Helper. [SOUND] We can add

8
00:00:39,732 --> 00:00:46,711
the required methods by hitting Ctrl+I.

9
00:00:46,711 --> 00:00:51,370
And we can override the constructor by hitting Ctrl+O. So now we can hard code

10
00:00:51,370 --> 00:00:56,800
these variables to constructor. Hard coding name to database name,

11
00:00:56,800 --> 00:01:03,600
our factory to null, and our version to database version.

12
00:01:03,600 --> 00:01:06,410
Now, you'll note I have made the database name public, and

13
00:01:06,410 --> 00:01:09,260
that's because we're going to use it in our tests in the future.

14
00:01:09,260 --> 00:01:12,260
Now you see we've got it on create and an onUpgrade method.

15
00:01:12,260 --> 00:01:15,700
In the OnCreate method, we're going to start by creating a string to build

16
00:01:15,700 --> 00:01:20,060
the weather entry table using data defined within the weather entry contract.

17
00:01:20,060 --> 00:01:23,100
Now I'm just going to add this comment, so you know where to go back and

18
00:01:23,100 --> 00:01:26,730
add the location entry stuff later. Since weather entry depends on

19
00:01:26,730 --> 00:01:30,100
location entry, I would normally write location entry first, but

20
00:01:30,100 --> 00:01:34,180
weather entry is pretty complicated. So I'd rather explain what we've done and

21
00:01:34,180 --> 00:01:38,890
leave location entry up to you. We're going to use raw SQL for

22
00:01:38,890 --> 00:01:43,510
our create table query, beginning with the table name from our contract.

23
00:01:43,510 --> 00:01:47,612
At this point, it's helpful to import WeatherContract.locationentry and

24
00:01:47,612 --> 00:01:51,590
weather entry. It makes our query so much easier to read. We'll start with

25
00:01:51,590 --> 00:01:57,130
our ID field, which we'll set as our primary key in an auto increment field.

26
00:01:57,130 --> 00:02:03,060
Note that integer is actually a signed value up to eight bytes long in SQLite.

27
00:02:03,060 --> 00:02:07,370
Using the auto increment feature doesn't do precisely what one might think.

28
00:02:07,370 --> 00:02:10,800
Setting up the ID is an integer primary key actually makes

29
00:02:10,800 --> 00:02:15,360
the value unique whenever you do an insert, but it may not always increment.

30
00:02:15,360 --> 00:02:19,400
It may reuse existing ID values of the records have been deleted.

31
00:02:19,400 --> 00:02:23,230
What autoincrement is really useful for, is if you're synchronizing data two

32
00:02:23,230 --> 00:02:27,160
ways with the server. But, we'll take advantage of it here because it makes data

33
00:02:27,160 --> 00:02:30,870
from our queries sort a bit more naturally because we insert them in the right

34
00:02:30,870 --> 00:02:35,000
order coming from the server. In general, we're using constraints on fields.

35
00:02:35,000 --> 00:02:39,500
In this case, not null. We do this because it allows the database to do much of

36
00:02:39,500 --> 00:02:43,510
our parameter validation for us. The tricky part about doing it this way,

37
00:02:43,510 --> 00:02:46,800
is that we don't get useful errors when these constraints fail, so

38
00:02:46,800 --> 00:02:51,240
it can be challenging to debug. We're using a human readable string for

39
00:02:51,240 --> 00:02:54,330
the date. There's no strong reason for or

40
00:02:54,330 --> 00:02:58,750
against this choice. We wanted to normalize the date to simplify our queries,

41
00:02:58,750 --> 00:03:03,400
and human readability simplifies debugging. The date comes from open weather in

42
00:03:03,400 --> 00:03:07,190
Unix time stamp format with some time information that we need to get rid of.

43
00:03:08,200 --> 00:03:13,290
I'm not going to cover every field. Real means floating point in SQL.

44
00:03:13,290 --> 00:03:17,480
It would have been fine to have used integer with fixed point math as well and

45
00:03:17,480 --> 00:03:19,470
some would argue that this would be faster, but

46
00:03:19,470 --> 00:03:24,180
real is more straight forward since we're storing floating point values. Now for

47
00:03:24,180 --> 00:03:26,635
the fun stuff, we're going to set up a loc key.

48
00:03:26,635 --> 00:03:31,410
It's a foreign key to the location entry table that you will be building.

49
00:03:31,410 --> 00:03:35,930
This causes SQLite to enforce the relationship between the tables.

50
00:03:35,930 --> 00:03:41,000
We cannot insert a weather entry when there is no corresponding location entry.

51
00:03:41,000 --> 00:03:44,820
And we cannot delete a location entry if there are still weather entries that

52
00:03:44,820 --> 00:03:49,840
depend on it. Cool stuff, right? One last constraint.

53
00:03:49,840 --> 00:03:56,140
Our date text plus location must be unique. On conflict, replace the data.

54
00:03:56,140 --> 00:04:00,050
This allows us to insert new data from the open weather EPI easily.

55
00:04:00,050 --> 00:04:04,080
Preserving existing keys and updating the value as the forecast changes.
